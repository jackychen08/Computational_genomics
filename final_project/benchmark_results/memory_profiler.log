Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     53.8 MiB     53.8 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     53.8 MiB      0.0 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     53.8 MiB     53.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     53.8 MiB      0.0 MiB           1       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42                                                 cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     53.8 MiB     53.8 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     54.1 MiB      0.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     54.1 MiB     54.1 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     54.2 MiB      0.1 MiB        1001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     54.2 MiB      0.0 MiB        1000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     54.2 MiB     54.2 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     55.0 MiB      0.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     54.8 MiB     54.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     54.8 MiB      0.0 MiB        2001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     54.8 MiB      0.0 MiB        2000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     54.8 MiB     54.8 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     55.5 MiB      0.7 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     55.0 MiB     55.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     55.0 MiB      0.0 MiB        3001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     55.0 MiB      0.0 MiB        3000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     55.0 MiB     55.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     56.5 MiB      1.5 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     56.0 MiB     56.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     56.0 MiB      0.0 MiB        4001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     56.0 MiB      0.0 MiB        4000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     56.0 MiB     56.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     57.4 MiB      1.4 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     56.4 MiB     56.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     56.4 MiB      0.0 MiB        5001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     56.4 MiB      0.0 MiB        5000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     56.4 MiB     56.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     57.5 MiB      1.0 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     56.5 MiB     56.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     56.5 MiB      0.0 MiB        6001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     56.5 MiB      0.0 MiB        6000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     56.5 MiB     56.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     59.1 MiB      2.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     58.3 MiB     58.3 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     58.3 MiB      0.0 MiB        7001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     58.3 MiB      0.0 MiB        7000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     58.3 MiB     58.3 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     60.9 MiB      2.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     58.4 MiB     58.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     58.4 MiB      0.0 MiB        8001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     58.4 MiB      0.0 MiB        8000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     58.4 MiB     58.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     61.0 MiB      2.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     59.0 MiB     59.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     59.0 MiB      0.0 MiB        9001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     59.0 MiB      0.0 MiB        9000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     59.0 MiB     59.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     61.0 MiB      2.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     58.8 MiB     58.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     58.8 MiB      0.0 MiB       10001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     58.8 MiB      0.0 MiB       10000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     58.8 MiB     58.8 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     61.1 MiB      2.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     59.1 MiB     59.1 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     59.1 MiB      0.0 MiB       11001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     59.1 MiB      0.0 MiB       11000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     59.1 MiB     59.1 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     61.2 MiB      2.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     59.2 MiB     59.2 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     59.2 MiB      0.0 MiB       12001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     59.2 MiB      0.0 MiB       12000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     59.2 MiB     59.2 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     64.7 MiB      5.5 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     62.9 MiB     62.9 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     62.9 MiB      0.0 MiB       13001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     62.9 MiB      0.0 MiB       13000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     62.9 MiB     62.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.3 MiB      5.4 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     63.3 MiB     63.3 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     63.3 MiB      0.0 MiB       14001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     63.3 MiB      0.0 MiB       14000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     63.3 MiB     63.3 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.3 MiB      5.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     63.0 MiB     63.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     63.0 MiB      0.0 MiB       15001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     63.0 MiB      0.0 MiB       15000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     63.0 MiB     63.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     67.9 MiB      4.9 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     63.1 MiB     63.1 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     63.1 MiB      0.0 MiB       16001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     63.1 MiB      0.0 MiB       16000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     63.1 MiB     63.1 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.0 MiB      4.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     63.7 MiB     63.7 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     63.7 MiB      0.0 MiB       17001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     63.7 MiB      0.0 MiB       17000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     63.7 MiB     63.7 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.0 MiB      4.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     63.5 MiB     63.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     63.5 MiB      0.0 MiB       18001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     63.5 MiB      0.0 MiB       18000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     63.5 MiB     63.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.1 MiB      4.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     64.1 MiB     64.1 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     64.1 MiB      0.1 MiB       19001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     64.1 MiB      0.0 MiB       19000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     64.1 MiB     64.1 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.1 MiB      4.0 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     63.9 MiB     63.9 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     63.9 MiB      0.0 MiB       20001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     63.9 MiB      0.0 MiB       20000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     63.9 MiB     63.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.2 MiB      4.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     64.5 MiB     64.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     64.5 MiB      0.0 MiB       21001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     64.5 MiB      0.0 MiB       21000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     64.5 MiB     64.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.3 MiB      3.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     64.0 MiB     64.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     64.0 MiB      0.0 MiB       22001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     64.0 MiB      0.0 MiB       22000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     64.0 MiB     64.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.3 MiB      4.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     64.8 MiB     64.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     64.9 MiB      0.0 MiB       23001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     64.9 MiB      0.0 MiB       23000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     64.9 MiB     64.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     68.4 MiB      3.5 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     64.4 MiB     64.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     64.4 MiB      0.0 MiB       24001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     64.4 MiB      0.0 MiB       24000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     64.4 MiB     64.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     75.6 MiB     11.2 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     71.4 MiB     71.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     71.4 MiB      0.0 MiB       25001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     71.4 MiB      0.0 MiB       25000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     71.4 MiB     71.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.4 MiB     11.0 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     71.4 MiB     71.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     71.4 MiB      0.0 MiB       26001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     71.4 MiB      0.0 MiB       26000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     71.4 MiB     71.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     81.7 MiB     10.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     71.5 MiB     71.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     71.5 MiB      0.0 MiB       27001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     71.5 MiB      0.0 MiB       27000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     71.5 MiB     71.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     81.8 MiB     10.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     72.0 MiB     72.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     72.1 MiB      0.0 MiB       28001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     72.1 MiB      0.0 MiB       28000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     72.1 MiB     72.1 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     81.9 MiB      9.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     72.9 MiB     72.9 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     72.9 MiB      0.0 MiB       29001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     72.9 MiB      0.0 MiB       29000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     72.9 MiB     72.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     81.9 MiB      9.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     72.4 MiB     72.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     72.4 MiB      0.0 MiB       30001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     72.4 MiB      0.0 MiB       30000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     72.4 MiB     72.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.0 MiB      9.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.0 MiB     73.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.0 MiB      0.0 MiB       31001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.0 MiB      0.0 MiB       31000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.0 MiB     73.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.0 MiB      9.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     72.8 MiB     72.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     72.9 MiB      0.1 MiB       32001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     72.9 MiB      0.0 MiB       32000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     72.9 MiB     72.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.1 MiB      9.2 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.3 MiB     73.3 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.4 MiB      0.0 MiB       33001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.4 MiB      0.0 MiB       33000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.4 MiB     73.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.2 MiB      8.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.2 MiB     73.2 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.2 MiB      0.0 MiB       34001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.2 MiB      0.0 MiB       34000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.2 MiB     73.2 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.2 MiB      9.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.5 MiB     73.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.5 MiB      0.0 MiB       35001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.5 MiB      0.0 MiB       35000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.5 MiB     73.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.3 MiB      8.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.5 MiB     73.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.6 MiB      0.1 MiB       36001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.6 MiB      0.0 MiB       36000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.6 MiB     73.6 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.3 MiB      8.7 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.8 MiB     73.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.9 MiB      0.0 MiB       37001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.9 MiB      0.0 MiB       37000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.9 MiB     73.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.4 MiB      8.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     73.9 MiB     73.9 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     73.9 MiB      0.0 MiB       38001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     73.9 MiB      0.0 MiB       38000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     73.9 MiB     73.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.5 MiB      8.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.0 MiB     74.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.0 MiB      0.0 MiB       39001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.0 MiB      0.0 MiB       39000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.0 MiB     74.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.5 MiB      8.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.3 MiB     74.3 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.4 MiB      0.1 MiB       40001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.4 MiB      0.0 MiB       40000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.4 MiB     74.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.6 MiB      8.2 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.4 MiB     74.4 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.4 MiB      0.0 MiB       41001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.4 MiB      0.0 MiB       41000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.4 MiB     74.4 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.7 MiB      8.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.7 MiB     74.7 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.7 MiB      0.0 MiB       42001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.7 MiB      0.0 MiB       42000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.7 MiB     74.7 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.7 MiB      8.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.5 MiB     74.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.5 MiB      0.0 MiB       43001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.5 MiB      0.0 MiB       43000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.5 MiB     74.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.8 MiB      8.3 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.8 MiB     74.8 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.9 MiB      0.1 MiB       44001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.9 MiB      0.0 MiB       44000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.9 MiB     74.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.9 MiB      8.0 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     74.9 MiB     74.9 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     74.9 MiB      0.0 MiB       45001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     74.9 MiB      0.0 MiB       45000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     74.9 MiB     74.9 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     82.9 MiB      8.0 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     75.2 MiB     75.2 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     75.2 MiB      0.0 MiB       46001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     75.2 MiB      0.0 MiB       46000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     75.2 MiB     75.2 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     83.0 MiB      7.8 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     75.0 MiB     75.0 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     75.0 MiB      0.0 MiB       47001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     75.0 MiB      0.0 MiB       47000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     75.0 MiB     75.0 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     83.0 MiB      8.1 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     75.5 MiB     75.5 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     75.5 MiB      0.0 MiB       48001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     75.5 MiB      0.0 MiB       48000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31     75.5 MiB     75.5 MiB           1   @profile(stream=fp)
    32                                         def make_cuckoo(n):#instantiate structure
    33     83.1 MiB      7.6 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     75.3 MiB     75.3 MiB           1   @profile(stream=fp)
    37                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    38                                             #insert a set of kmers into the cuckoo
    39                                             
    40     75.4 MiB      0.0 MiB       49001       for i in range(0,n):
    41                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    42     75.4 MiB      0.0 MiB       49000           cuckoo.insert(fa[i])


