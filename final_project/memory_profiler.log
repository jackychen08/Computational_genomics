Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     49.5 MiB     49.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14     49.5 MiB      0.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     49.5 MiB     49.5 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     49.5 MiB      0.0 MiB           1       for i in range(0,n):
    22                                                 cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     49.5 MiB     49.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14     52.7 MiB      3.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     52.7 MiB     52.7 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     52.7 MiB      0.0 MiB       10001       for i in range(0,n):
    22     52.7 MiB      0.0 MiB       10000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     52.7 MiB     52.7 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14     59.3 MiB      6.6 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     56.8 MiB     56.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     56.8 MiB      0.0 MiB       20001       for i in range(0,n):
    22     56.8 MiB      0.0 MiB       20000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     56.8 MiB     56.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14     70.1 MiB     13.3 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     62.8 MiB     62.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     62.8 MiB      0.0 MiB       30001       for i in range(0,n):
    22     62.8 MiB      0.0 MiB       30000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     62.8 MiB     62.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14     76.5 MiB     13.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     64.3 MiB     64.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     64.3 MiB      0.0 MiB       40001       for i in range(0,n):
    22     64.3 MiB      0.0 MiB       40000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     64.3 MiB     64.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14     90.7 MiB     26.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     77.7 MiB     77.7 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     77.7 MiB      0.0 MiB       50001       for i in range(0,n):
    22     77.7 MiB      0.0 MiB       50000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     77.7 MiB     77.7 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    103.9 MiB     26.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     78.9 MiB     78.9 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     78.9 MiB      0.0 MiB       60001       for i in range(0,n):
    22     78.9 MiB      0.0 MiB       60000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     78.9 MiB     78.9 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    103.3 MiB     24.4 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     77.5 MiB     77.5 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     77.5 MiB      0.0 MiB       70001       for i in range(0,n):
    22     77.5 MiB      0.0 MiB       70000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     77.5 MiB     77.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    103.3 MiB     25.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     80.5 MiB     80.5 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     80.5 MiB      0.0 MiB       80001       for i in range(0,n):
    22     80.5 MiB      0.0 MiB       80000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     80.5 MiB     80.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    103.3 MiB     22.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17     79.8 MiB     79.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21     79.8 MiB      0.0 MiB       90001       for i in range(0,n):
    22     79.8 MiB      0.0 MiB       90000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     79.8 MiB     79.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    132.2 MiB     52.4 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    105.3 MiB    105.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    105.3 MiB      0.0 MiB      100001       for i in range(0,n):
    22    105.3 MiB      0.0 MiB      100000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    105.0 MiB    105.0 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    158.6 MiB     53.6 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    106.8 MiB    106.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    106.8 MiB      0.0 MiB      110001       for i in range(0,n):
    22    106.8 MiB      0.0 MiB      110000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    106.8 MiB    106.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     49.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    105.3 MiB    105.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    105.3 MiB      0.0 MiB      120001       for i in range(0,n):
    22    105.3 MiB      0.0 MiB      120000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    105.3 MiB    105.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     50.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    108.5 MiB    108.5 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    108.5 MiB      0.0 MiB      130001       for i in range(0,n):
    22    108.5 MiB      0.0 MiB      130000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    108.5 MiB    108.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     47.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    109.5 MiB    109.5 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    109.5 MiB      0.0 MiB      140001       for i in range(0,n):
    22    109.5 MiB      0.0 MiB      140000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    109.5 MiB    109.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     46.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    108.8 MiB    108.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    108.8 MiB      0.0 MiB      150001       for i in range(0,n):
    22    108.8 MiB      0.0 MiB      150000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    108.8 MiB    108.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     47.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    109.8 MiB    109.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    109.8 MiB      0.0 MiB      160001       for i in range(0,n):
    22    109.8 MiB      0.0 MiB      160000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    109.8 MiB    109.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     46.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    109.0 MiB    109.0 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    109.0 MiB      0.0 MiB      170001       for i in range(0,n):
    22    109.0 MiB      0.0 MiB      170000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    109.0 MiB    109.0 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     47.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    110.0 MiB    110.0 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    110.0 MiB      0.0 MiB      180001       for i in range(0,n):
    22    110.0 MiB      0.0 MiB      180000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    110.0 MiB    110.0 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    156.0 MiB     46.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    109.3 MiB    109.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    109.3 MiB      0.0 MiB      190001       for i in range(0,n):
    22    109.3 MiB      0.0 MiB      190000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    109.3 MiB    109.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    212.9 MiB    103.6 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    159.2 MiB    159.2 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    159.2 MiB      0.0 MiB      200001       for i in range(0,n):
    22    159.2 MiB      0.0 MiB      200000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    159.2 MiB    159.2 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    266.7 MiB    107.6 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    163.5 MiB    163.5 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    163.5 MiB      0.0 MiB      210001       for i in range(0,n):
    22    163.5 MiB      0.0 MiB      210000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    163.5 MiB    163.5 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     98.1 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    159.3 MiB    159.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    159.3 MiB      0.0 MiB      220001       for i in range(0,n):
    22    159.3 MiB      0.0 MiB      220000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    159.3 MiB    159.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB    102.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    166.6 MiB    166.6 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    166.6 MiB      0.0 MiB      230001       for i in range(0,n):
    22    166.6 MiB      0.0 MiB      230000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    166.6 MiB    166.6 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     95.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    167.6 MiB    167.6 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    167.6 MiB      0.0 MiB      240001       for i in range(0,n):
    22    167.6 MiB      0.0 MiB      240000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    167.6 MiB    167.6 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     94.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    166.8 MiB    166.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    166.8 MiB      0.0 MiB      250001       for i in range(0,n):
    22    166.8 MiB      0.0 MiB      250000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    166.8 MiB    166.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     94.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    167.8 MiB    167.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    167.8 MiB      0.0 MiB      260001       for i in range(0,n):
    22    167.8 MiB      0.0 MiB      260000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    167.8 MiB    167.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.7 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    167.1 MiB    167.1 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    167.1 MiB      0.0 MiB      270001       for i in range(0,n):
    22    167.1 MiB      0.0 MiB      270000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    167.1 MiB    167.1 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     94.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.1 MiB    168.1 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.1 MiB      0.0 MiB      280001       for i in range(0,n):
    22    168.1 MiB      0.0 MiB      280000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.1 MiB    168.1 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    167.3 MiB    167.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    167.3 MiB      0.0 MiB      290001       for i in range(0,n):
    22    167.3 MiB      0.0 MiB      290000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    167.3 MiB    167.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     94.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.3 MiB    168.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.3 MiB      0.0 MiB      300001       for i in range(0,n):
    22    168.3 MiB      0.0 MiB      300000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.3 MiB    168.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    167.6 MiB    167.6 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    167.6 MiB      0.0 MiB      310001       for i in range(0,n):
    22    167.6 MiB      0.0 MiB      310000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    167.6 MiB    167.6 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     94.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.6 MiB    168.6 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.6 MiB      0.0 MiB      320001       for i in range(0,n):
    22    168.6 MiB      0.0 MiB      320000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.6 MiB    168.6 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    167.8 MiB    167.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    167.8 MiB      0.0 MiB      330001       for i in range(0,n):
    22    167.8 MiB      0.0 MiB      330000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    167.8 MiB    167.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.8 MiB    168.8 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.8 MiB      0.0 MiB      340001       for i in range(0,n):
    22    168.8 MiB      0.0 MiB      340000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.8 MiB    168.8 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     92.7 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.1 MiB    168.1 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.1 MiB      0.0 MiB      350001       for i in range(0,n):
    22    168.1 MiB      0.0 MiB      350000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.1 MiB    168.1 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    169.1 MiB    169.1 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    169.1 MiB      0.0 MiB      360001       for i in range(0,n):
    22    169.1 MiB      0.0 MiB      360000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    169.1 MiB    169.1 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     92.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.3 MiB    168.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.3 MiB      0.0 MiB      370001       for i in range(0,n):
    22    168.3 MiB      0.0 MiB      370000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.3 MiB    168.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     93.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    169.3 MiB    169.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    169.3 MiB      0.0 MiB      380001       for i in range(0,n):
    22    169.3 MiB      0.0 MiB      380000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    169.3 MiB    169.3 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    261.6 MiB     92.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    168.6 MiB    168.6 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    168.6 MiB      0.0 MiB      390001       for i in range(0,n):
    22    168.6 MiB      0.0 MiB      390000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    168.6 MiB    168.6 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    375.4 MiB    206.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    267.3 MiB    267.3 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    267.3 MiB      0.0 MiB      400001       for i in range(0,n):
    22    267.3 MiB      0.0 MiB      400000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    267.2 MiB    267.2 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    482.0 MiB    214.8 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    275.7 MiB    275.7 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    275.7 MiB      0.0 MiB      410001       for i in range(0,n):
    22    275.7 MiB      0.0 MiB      410000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    275.7 MiB    275.7 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    472.7 MiB    196.9 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    267.2 MiB    267.2 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    267.2 MiB      0.0 MiB      420001       for i in range(0,n):
    22    267.2 MiB      0.0 MiB      420000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    267.2 MiB    267.2 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    472.7 MiB    205.5 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    282.7 MiB    282.7 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    282.7 MiB      0.0 MiB      430001       for i in range(0,n):
    22    282.7 MiB      0.0 MiB      430000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    282.7 MiB    282.7 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    472.7 MiB    190.0 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    283.4 MiB    283.4 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    19                                             #insert a set of kmers into the cuckoo
    20                                             
    21    283.4 MiB      0.0 MiB      440001       for i in range(0,n):
    22    283.4 MiB      0.0 MiB      440000           cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12    283.4 MiB    283.4 MiB           1   @profile(stream=fp)
    13                                         def make_cuckoo(n):#instantiate structure
    14    472.7 MiB    189.2 MiB           1       return Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    17    282.9 MiB    282.9 MiB           1   @profile(stream=fp)
    18                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
