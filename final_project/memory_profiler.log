Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.2383 MiB  50.2383 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.2422 MiB   0.0039 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.2461 MiB  50.2461 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.2461 MiB   0.0000 MiB           1       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44                                                 cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.2461 MiB  50.2461 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.2891 MiB   0.0430 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.2891 MiB  50.2891 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.3516 MiB   0.0000 MiB         501       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  50.3516 MiB   0.0625 MiB         500           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.3516 MiB  50.3516 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.4766 MiB   0.1250 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.4766 MiB  50.4766 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.4766 MiB   0.0000 MiB        1001       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  50.4766 MiB   0.0000 MiB        1000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.4766 MiB  50.4766 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.4844 MiB   0.0078 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.4844 MiB  50.4844 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.6016 MiB   0.0000 MiB        1501       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  50.6016 MiB   0.1172 MiB        1500           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.6016 MiB  50.6016 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.7344 MiB   0.1328 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.7344 MiB  50.7344 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.8516 MiB   0.0000 MiB        2001       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  50.8516 MiB   0.1172 MiB        2000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.8516 MiB  50.8516 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.8516 MiB   0.0000 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.8516 MiB  50.8516 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.8516 MiB   0.0000 MiB        2501       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  50.8516 MiB   0.0000 MiB        2500           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.8516 MiB  50.8516 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.8516 MiB   0.0000 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.8516 MiB  50.8516 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  50.8516 MiB   0.0000 MiB        3001       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  50.8516 MiB   0.0000 MiB        3000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  50.8555 MiB  50.8555 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  50.9883 MiB   0.1328 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  50.9883 MiB  50.9883 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  51.2930 MiB   0.0000 MiB        3501       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  51.2930 MiB   0.3047 MiB        3500           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  51.2930 MiB  51.2930 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  51.2930 MiB   0.0000 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  51.2930 MiB  51.2930 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  51.2930 MiB   0.0000 MiB        4001       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  51.2930 MiB   0.0000 MiB        4000           cuckoo.insert(fa[i])


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33  51.2930 MiB  51.2930 MiB           1   @profile(stream=fp,precision=4)
    34                                         def make_cuckoo(n):#instantiate structure
    35  51.2930 MiB   0.0000 MiB           1       return Counting_Cuckoo(n, 3)


Filename: memory_benchmark.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    38  51.2930 MiB  51.2930 MiB           1   @profile(stream=fp,precision=4)
    39                                         def cuckoo_insert_random_numbers(cuckoo,n): # insert until cuckoo is full
    40                                             #insert a set of kmers into the cuckoo
    41                                             
    42  51.2930 MiB   0.0000 MiB        4501       for i in range(0,n):
    43                                                 # cuckoo.insert(str(random.getrandbits(64)))#test with random 64 bit ints
    44  51.2930 MiB   0.0000 MiB        4500           cuckoo.insert(fa[i])


